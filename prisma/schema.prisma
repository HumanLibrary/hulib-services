generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [uuidOssp(map: "uuid-ossp")]
}

model file {
  id   String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  path String @db.VarChar
  user user[]
}

model gender {
  id   Int    @id
  name String @db.VarChar
  user user[]
}

model humanBook_sharing_topic {
  userId   Int
  topicsId Int
  topics   topics @relation(fields: [topicsId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_topics")
  user     user   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")

  @@id([userId, topicsId])
}

model humanBooks {
  id             Int       @id @default(autoincrement())
  userId         Int
  bio            String?   @db.VarChar
  videoUrl       String?   @db.VarChar
  education      String?   @db.VarChar
  educationStart DateTime? @db.Date
  educationEnd   DateTime? @db.Date
  createdAt      DateTime  @default(now()) @db.Timestamp(6)
  updatedAt      DateTime  @default(now()) @db.Timestamp(6)
  user           user      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_human_books_user")
}

model migrations {
  id        Int    @id(map: "PK_8c82d7f526340ab734260ea46be") @default(autoincrement())
  timestamp BigInt
  name      String @db.VarChar
}

model role {
  id   Int    @id
  name String @db.VarChar
  user user[]
}

model session {
  id        Int       @id @default(autoincrement())
  hash      String    @db.VarChar
  createdAt DateTime  @default(now()) @db.Time(6)
  updatedAt DateTime  @default(now()) @db.Time(6)
  deletedAt DateTime? @db.Time(6)
  userId    Int?
}

model status {
  id   Int    @id
  name String @db.VarChar
  user user[]
}

model topics {
  id                      Int                       @id @default(autoincrement())
  name                    String                    @db.VarChar
  createdAt               DateTime                  @default(now()) @db.Timestamp(6)
  updatedAt               DateTime                  @default(now()) @db.Timestamp(6)
  humanBook_sharing_topic humanBook_sharing_topic[]
}

model user {
  id                      Int                       @id @default(autoincrement())
  email                   String?                   @db.VarChar
  password                String?                   @db.VarChar
  provider                String                    @default("email") @db.VarChar
  socialId                String?                   @db.VarChar
  fullName                String?                   @db.VarChar
  birthday                String?                   @db.VarChar
  createdAt               DateTime                  @default(now()) @db.Time(6)
  updatedAt               DateTime                  @default(now()) @db.Time(6)
  deletedAt               DateTime?                 @db.Time(6)
  genderId                Int?
  roleId                  Int?
  statusId                Int?
  approval                String?                   @db.VarChar
  photoId                 String?                   @db.Uuid
  address                 String?                   @db.VarChar
  parentPhoneNumber       String?                   @db.VarChar
  phoneNumber             String?                   @db.VarChar
  bio                     String?                   @db.VarChar
  videoUrl                String?                   @db.VarChar
  education               String?                   @db.VarChar
  educationStart          DateTime?                 @db.Date
  educationEnd            DateTime?                 @db.Date
  humanBook_sharing_topic humanBook_sharing_topic[]
  humanBooks              humanBooks[]
  gender                  gender?                   @relation(fields: [genderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  file                    file?                     @relation(fields: [photoId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  role                    role?                     @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  status                  status?                   @relation(fields: [statusId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
